<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAANcNAADXDQAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
        ADoAAACoAAAA6gAAAP0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPsAAADeAAAAjAAA
        ACEAAAAAAAAAAAAAAAEAAAAqAAAAYAAAACsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAABcAAAA4gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD+AAAAyAAAADUAAAAAAAAAcAAAAMwAAADDAAAAxAAAACEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAARAAAAOkAAAD/AAAA/wAAAP8AAADzAAAAxQAAAKUAAACgAAAAoAAAAKAAAACgAAAAqgAA
        ANIAAAD6AAAA/wAAAP8AAAD/AAAAxwAAACEAAADnAAAAXwAAAA0AAACnAAAAigAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAkAAACzAAAA/wAAAP8AAAD/AAAAygAAAE0AAAA0AAAASgAAAFEAAABSAAAAUgAA
        AFAAAABFAAAAMAAAAGoAAADlAAAA/wAAAP8AAAD+AAAAiwAAAMwAAAByAAAAAAAAADkAAADPAAAANgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAALQAAAOoAAAD/AAAA/wAAANIAAAA0AAAAeAAAAOIAAAD2AAAAzAAA
        ALcAAAC4AAAA2gAAAPcAAADQAAAAUgAAAFUAAADvAAAA/wAAAP8AAADcAAAAVwAAAMoAAAAmAAAAAAAA
        AI0AAACkAAAABwAAAAAAAAAAAAAAAAAAAAAAAABIAAAA+QAAAP8AAAD8AAAAZAAAAGkAAAD6AAAA/wAA
        AMkAAAAsAAAAPgAAADUAAABFAAAA7QAAAP8AAADmAAAAPgAAAJwAAAD/AAAA/wAAAPoAAAAHAAAAoQAA
        AJAAAAAAAAAAJAAAAMsAAABOAAAAAAAAAAAAAAAAAAAAAAAAAE0AAAD6AAAA/wAAAOUAAAA2AAAAxAAA
        AP8AAAD/AAAAsAAAADYAAADAAAAApAAAADEAAADgAAAA/wAAAP8AAACMAAAAWAAAAPwAAAD/AAAA/gAA
        AAAAAAA0AAAAzwAAADwAAAAAAAAAcgAAALkAAAARAAAAAAAAAAAAAAAAAAAATQAAAPoAAAD/AAAA1gAA
        ADUAAADeAAAA/wAAAP8AAADWAAAAPwAAADUAAAAyAAAAXgAAAPIAAAD/AAAA/wAAAKwAAABGAAAA9gAA
        AP8AAAD+AAAAAAAAAAEAAACHAAAAqgAAAAgAAAAUAAAAvwAAAGkAAAAAAAAAAAAAAAAAAABNAAAA+gAA
        AP8AAADUAAAAMgAAAMsAAADqAAAA6AAAAOgAAADUAAAAyAAAAMgAAADbAAAA6QAAAOgAAADsAAAAngAA
        AEQAAAD2AAAA/wAAAP4AAAAAAAAAAAAAACAAAADJAAAAVgAAAAAAAABXAAAAyAAAAB8AAAAAAAAAAAAA
        AE0AAAD6AAAA/wAAANYAAAAdAAAAMAAAADgAAAA4AAAAOAAAADkAAAA6AAAAOgAAADkAAAA4AAAAOAAA
        ADkAAAAjAAAAQQAAAPYAAAD/AAAA/gAAAAAAAAAAAAAAAAAAAGoAAAC/AAAAFAAAAAgAAACrAAAAhQAA
        AAAAAAAAAAAATQAAAPoAAAD/AAAA1QAAAC8AAACwAAAAywAAAMQAAAC/AAAAvwAAAL8AAAC/AAAAvwAA
        AMAAAADGAAAAzAAAAIgAAABEAAAA9gAAAP8AAAD+AAAAAAAAAAAAAAAAAAAAEQAAALoAAAByAAAAAAAA
        AD0AAADPAAAAMgAAAAAAAABNAAAA+gAAAP8AAADUAAAANQAAAOAAAAD5AAAAcwAAAEMAAABHAAAARwAA
        AEcAAABHAAAAQwAAAJ0AAAD/AAAArgAAAEUAAAD2AAAA/wAAAP4AAAAAAAAAAAAAAAAAAAAAAAAATgAA
        AMwAAAAlAAAAAQAAAJIAAACfAAAAAQAAAE0AAAD6AAAA/wAAANQAAAA1AAAA4AAAAPEAAAA5AAAAfwAA
        ALAAAACtAAAArQAAALAAAABXAAAAZwAAAP8AAACuAAAARQAAAPYAAAD/AAAA/gAAAAAAAAAAAAAAAAAA
        AAAAAAAHAAAApAAAAI4AAAAAAAAAKAAAAM0AAABFAAAASgAAAPoAAAD/AAAA1AAAADUAAADgAAAA8gAA
        ADkAAABDAAAAXwAAAF4AAABeAAAAXwAAAC0AAABsAAAA/wAAAK4AAABFAAAA9gAAAP8AAAD+AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAA2AAAAzwAAADoAAAAAAAAAdwAAALIAAABcAAAA+gAAAP8AAADUAAAANQAA
        AN8AAAD+AAAAuAAAAJQAAACUAAAAlAAAAJQAAACUAAAAlgAAAM8AAAD/AAAArgAAAEUAAAD2AAAA/wAA
        AP4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAACJAAAAqAAAAAcAAAAXAAAAvgAAALEAAAD4AAAA/wAA
        ANUAAAAkAAAAZQAAAHUAAAB3AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAdgAAAHYAAABNAAAAQgAA
        APYAAAD/AAAA/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIAAADKAAAAVAAAAAAAAABZAAAA8gAA
        AP8AAAD/AAAA1QAAACQAAABlAAAAdQAAAHQAAAB1AAAAeAAAAHgAAAB4AAAAdwAAAHQAAAB0AAAAdgAA
        AE0AAABCAAAA9gAAAP8AAAD+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGwAAAC9AAAAEwAA
        AAoAAACwAAAA/wAAAP8AAADUAAAANQAAAN8AAAD/AAAA/wAAAPcAAACwAAAAkwAAAJQAAADFAAAA/gAA
        AP8AAAD/AAAArgAAAEUAAAD2AAAA/wAAAP4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAA
        ALsAAABwAAAAAAAAAFgAAAD8AAAA/wAAANkAAAA0AAAA2QAAAP8AAAD/AAAAvgAAACUAAABbAAAATQAA
        ADYAAADoAAAA/wAAAP8AAAClAAAASQAAAPgAAAD/AAAA/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAUAAAAMsAAAAfAAAASwAAAPoAAAD/AAAA7wAAAD8AAACpAAAA/wAAAP8AAACxAAAAMQAA
        AKgAAACQAAAAMAAAAOEAAAD/AAAA/wAAAHAAAABsAAAA/wAAAP8AAAD+AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAIAAAApQAAAIgAAABPAAAA+gAAAP8AAAD/AAAAjgAAAD4AAADdAAAA/wAA
        AOMAAABgAAAARgAAAEUAAACAAAAA+AAAAP8AAAC4AAAALgAAAMIAAAD/AAAA/wAAAP4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAywAAAIYAAAD4AAAA/wAAAP8AAADxAAAAZQAA
        ADkAAACYAAAAxgAAAMUAAAC/AAAAvwAAAMcAAAC/AAAAgAAAAC0AAACSAAAA/QAAAP8AAAD/AAAA/gAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAACHAAAA5wAAAPsAAAD/AAAA/wAA
        AP8AAADzAAAAnAAAAEsAAAA5AAAAOAAAADgAAAA4AAAAOAAAADoAAABZAAAAuAAAAPsAAAD/AAAA/wAA
        AP8AAAD+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIAAADWAAAA/wAA
        AP8AAAD/AAAA/QAAAOsAAADrAAAA9gAAAOsAAADoAAAA6AAAAOgAAADoAAAA7QAAAPsAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AHMAAAD/AAAA/wAAAPcAAACLAAAAOAAAADUAAAB6AAAA8AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAATQAAAPoAAAD/AAAAqQAAADIAAACzAAAAvgAAADwAAACPAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABIAAAA+QAAAP8AAABuAAAAdQAAAP8AAAD/AAAAkgAAAFUAAAD9AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC0AAADqAAAA/wAAAIwAAABKAAAA6AAAAPAAAABfAAAAcQAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA3AAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAALIAAAD/AAAA5QAAAFIAAAA4AAAAPAAA
        AEMAAADXAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP4AAACLAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAAAAOkAAAD/AAAA7QAA
        ALUAAACvAAAA5wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAxwAA
        ACIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAXAAA
        AOIAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/gAA
        AMgAAAA1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAAOgAAAKgAAADqAAAA/QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+wAA
        AN4AAACMAAAAIQAAAAAAAAAA//gAAw/wAAEH8AAAA+AAACPgAAAR4AAAEeAAAIjgAACA4AAAxGAAAOBg
        AADiIAAA8AAAAPEAAAD4gAAA+AAAAPxAAAD+AAAA/iAAAP8AAAD/AAAA/4AAAP+AAAD/wAAA/+AAAP/g
        AAD/4AAA/+AAAP/gAAD/8AAA//AAAf/4AAM=
</value>
  </data>
</root>